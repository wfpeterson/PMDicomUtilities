/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CDImporterGUI.java
 *
 * Created on Mar 29, 2011, 2:33:52 PM
 */

// TODO update the store scp dropdown when last entry is deleted
// @BUG Sometimes hangs on exit



package CDImporter;

import ca.odell.glazedlists.event.ListEvent;
import java.awt.event.ComponentEvent;
import objectforge.com.dicom.utils.pixelmed.simulator.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import ca.odell.glazedlists.EventList;
import ca.odell.glazedlists.GlazedLists;
import ca.odell.glazedlists.event.ListEventListener;
import ca.odell.glazedlists.gui.TableFormat;
import ca.odell.glazedlists.swing.EventComboBoxModel;
import ca.odell.glazedlists.swing.EventTableModel;
import static com.pixelmed.dicom.DicomFileUtilities.isDicomOrAcrNemaFile;
import com.pixelmed.display.DicomImageViewer;
import gov.va.med.imaging.dicom.utils.pixelmed.controller.DCMFilenameFilter;
import gov.va.med.imaging.dicom.utils.pixelmed.exceptions.ReadFileException;
import java.awt.Cursor;
import java.awt.event.ComponentListener;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import objectforge.com.dicom.utils.pixelmed.view.DicomImageInfo;


/**
 *
 * @author vhaiswcsipod
 * 
 * The main GUI class of the Modality Simultaor package.
 */
public class CDImporterGUI extends javax.swing.JFrame implements ListEventListener<DicomConfigInfo>{
    /**
     * local variables
     */
    private String mDirectory;
    private DicomConfigInfo mQueryDest;
    private DicomConfigInfo mStoreDest;
    private EventTableModel mTableModel;
    private EventList<WorkListEntry> mQueryResults = GlazedLists.eventList(null);
    private MWLScu mMwlScu;
    private int mSelectedQRResult;
    private ModelManufacturerEntry mSelectedManufacturer;
    private DicomImageViewer mImageViewer;
    private DicomConfigInfoList mConfInfo = DicomConfigInfoList.getInstance();
    private EventList<DicomConfigInfo> mChangingAETList = DicomConfigInfoList.getObservableInstance();
    private EventList<ModelManufacturerEntry> mChangingMFGModelList = ModelManufacturerList.getObservableInstance(); 
    private ModelManufacturerList mManufacturer = ModelManufacturerList.getInstance();
    private static EventList<String> mMWLDestList = GlazedLists.eventList(null);
    private static EventList<String> mSTRDestList = GlazedLists.eventList(null);
    private EventComboBoxModel<String> mQueryDestModel;
    private JTextArea viewText = new JTextArea();
    private LogViewer mLogViewer = new LogViewer(viewText);
    private CDImporterGUI AppFrame = this;
    private Vector FileList = null;
    private ImportConfigFrame _mImport  = null;
    private boolean EnableMWL = true;

    /** 
     * Creates new form SimulatorGUI 
     * 
     * Constructor SimulatorGUI starts the main simulator scree
     */
    public CDImporterGUI() {
        initComponents();
        // get the output of the System.out into a text box
        //
        redirectSystemStreams();
        // read the configuration
        String msg = mConfInfo.read();
        msg = mManufacturer.read();
        mChangingAETList.addListEventListener(this);
        //initalize the drop lists for MWL, store, browse and manufacturer
        //
        initDropLists();
        getCurrentConfig();
        Send.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        QueryResultList = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        PatientName = new javax.swing.JTextField();
        PnameLBL = new javax.swing.JLabel();
        PatIDLbl = new javax.swing.JLabel();
        PatientID = new javax.swing.JTextField();
        AccessionNumber = new javax.swing.JTextField();
        AccessionNUmberLb = new javax.swing.JLabel();
        ModalityLb = new javax.swing.JLabel();
        Modality = new javax.swing.JComboBox();
        Clear = new javax.swing.JButton();
        TodayCheckBox = new javax.swing.JCheckBox();
        UseMWL = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        BrowseDir = new javax.swing.JButton();
        StoreSCPLb = new javax.swing.JLabel();
        StoreSCP = new javax.swing.JComboBox();
        Send = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CalledAETlabelStore = new javax.swing.JLabel();
        CallingAETlabelStore = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        SelectedModality = new javax.swing.JLabel();
        SelectedModel = new javax.swing.JLabel();
        SelectedManufacturer = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ManufacturerComboBox = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        StoreHost = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        StorePort = new javax.swing.JLabel();
        ShowLog = new javax.swing.JButton();
        DirectoryPath = new javax.swing.JComboBox();
        UpdateUIDs = new javax.swing.JCheckBox();
        MoreOptions = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        QueryBtn = new javax.swing.JButton();
        QueryDestLb = new javax.swing.JLabel();
        QueryDest = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        CalledAETlabelMWL = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CallingAETLabelMWL = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        MWLHost = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        MWLPort = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        ImageInfoMenu = new javax.swing.JMenuItem();
        jMenuItemDisplay = new javax.swing.JMenuItem();
        jMenuImportConfig = new javax.swing.JMenuItem();
        FileMenuExit = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        EditMenuConfigure = new javax.swing.JMenuItem();
        ManufacturerModelMenu = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        HelpHelpMenuItem = new javax.swing.JMenuItem();
        HelpAboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modality Simulator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        QueryResultList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Patient ID", "Accession #", "Modality"
            }
        ));
        QueryResultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                QueryResultListMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QueryResultListMouseClicked(evt);
            }
        });
        QueryResultList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                QueryResultListKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                QueryResultListKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(QueryResultList);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Query Parameters");

        PatientName.setToolTipText("Enter the Patient Name or regular expression to be Querried");
        PatientName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PatientNameKeyTyped(evt);
            }
        });

        PnameLBL.setText("Patient Name");
        PnameLBL.setToolTipText("The Name of the patient");

        PatIDLbl.setText("Patient ID");
        PatIDLbl.setToolTipText("Patient Medical Record Numbee");

        PatientID.setToolTipText("Enter the Medical record number or other patient ID or reqular expression used for the query");
        PatientID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PatientIDKeyTyped(evt);
            }
        });

        AccessionNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AccessionNumberKeyTyped(evt);
            }
        });

        AccessionNUmberLb.setText("Accession#");

        ModalityLb.setText("Modality");
        ModalityLb.setToolTipText("Modality");

        Modality.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<none>", "CR", "CT", "MR", "NM", "US", "OT", "XA", "RF", "BI", "DG", "ES", "LS", "PT", "RG", "TG", "RTIMAGE", "RTDOSE", "RTSTRUCT", "RTPLAN", "RTRECORD", "HC", "DX", "MG", "IO", "PX", "GM", "SM", "XC", "PR", "AU", "ECG", "EPS", "HD", "SR", "IVUS", "OP", "SMR", "AR", "KER", "VA", "SRF", "OCT", "LEN", "OPV", "OPM", "OAM", "RESP", "KO", "SEG", "REG", "OPT", "BDUS", "BMD", "DOC", "FID", "PLAN", "IOL", "IVOCT", "DS", "CF", "DF", "VF", "AS", "CS", "EC", "LP", "FA", "CP", "DM", "FS", "MA", "MS", "CD", "DD", "ST", "OPR" }));
        Modality.setToolTipText("Select the modality");

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        TodayCheckBox.setText("Today Only");
        TodayCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TodayCheckBoxActionPerformed(evt);
            }
        });

        UseMWL.setSelected(true);
        UseMWL.setText("Modality Worklist On");
        UseMWL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseMWLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(PnameLBL)
                        .addGap(18, 18, 18)
                        .addComponent(PatientName))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ModalityLb)
                        .addGap(47, 47, 47)
                        .addComponent(Modality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(TodayCheckBox)
                        .addGap(16, 16, 16)
                        .addComponent(Clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(PatIDLbl)
                    .addComponent(AccessionNUmberLb)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PatientID)
                            .addComponent(AccessionNumber))))
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UseMWL)
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(UseMWL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PnameLBL)
                    .addComponent(PatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatIDLbl)
                    .addComponent(PatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AccessionNUmberLb)
                    .addComponent(AccessionNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Modality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModalityLb)
                    .addComponent(Clear)
                    .addComponent(TodayCheckBox))
                .addGap(40, 40, 40))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Send Configuration");

        jLabel1.setText("Directory");
        jLabel1.setToolTipText("The directoryy of images to be transmitted");

        BrowseDir.setText("Browse");
        BrowseDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseDirActionPerformed(evt);
            }
        });

        StoreSCPLb.setText("Storage SCP");

        StoreSCP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${mSTRDestList}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, StoreSCP);
        bindingGroup.addBinding(jComboBoxBinding);

        StoreSCP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StoreSCPMouseClicked(evt);
            }
        });
        StoreSCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StoreSCPActionPerformed(evt);
            }
        });
        StoreSCP.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                StoreSCPPropertyChange(evt);
            }
        });

        Send.setText("send");
        Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendActionPerformed(evt);
            }
        });

        jLabel5.setText("Called AE Title");

        jLabel7.setText("Calling AE Title");

        CalledAETlabelStore.setText("<called AET Store>");

        CallingAETlabelStore.setText("<calling AET Store>");

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        SelectedModality.setText("<selected value>");

        SelectedModel.setText("<selected value>");

        SelectedManufacturer.setText("<selected value>");

        jLabel11.setText("Modality");

        jLabel10.setText("Model");

        jLabel9.setText("Manufacturer");

        jLabel8.setText("Manufacturer/Model");

        ManufacturerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ManufacturerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManufacturerComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel8))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SelectedModel)
                            .addComponent(SelectedManufacturer)
                            .addComponent(SelectedModality)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(ManufacturerComboBox, 0, 392, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(ManufacturerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(SelectedManufacturer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SelectedModel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SelectedModality)))
                .addGap(47, 47, 47))
        );

        jLabel14.setText("Host");

        StoreHost.setText("<entry>");

        jLabel15.setText("Port");

        StorePort.setText("<entry>");

        ShowLog.setText("Show Log");
        ShowLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowLogActionPerformed(evt);
            }
        });

        DirectoryPath.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "./" }));
        DirectoryPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DirectoryPathMouseClicked(evt);
            }
        });
        DirectoryPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectoryPathActionPerformed(evt);
            }
        });

        UpdateUIDs.setText("Generate DICOM UIDs");

        MoreOptions.setText("+");
        MoreOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoreOptionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ShowLog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoreOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(StoreSCPLb)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15)
                                    .addComponent(UpdateUIDs))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(DirectoryPath, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BrowseDir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(StoreSCP, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(StoreHost, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                                    .addComponent(StorePort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(CallingAETlabelStore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(14, 14, 14))
                                            .addComponent(CalledAETlabelStore, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(BrowseDir)
                    .addComponent(DirectoryPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StoreSCPLb)
                            .addComponent(StoreSCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(CalledAETlabelStore))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(CallingAETlabelStore))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(StoreHost))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StorePort)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateUIDs))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Send)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShowLog)
                    .addComponent(MoreOptions)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        QueryBtn.setText("Query");
        QueryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryBtnActionPerformed(evt);
            }
        });

        QueryDestLb.setText("Modality Worklist SCP");

        QueryDest.setMaximumRowCount(1024);
        QueryDest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QueryDestMouseClicked(evt);
            }
        });
        QueryDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryDestActionPerformed(evt);
            }
        });
        QueryDest.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                QueryDestPropertyChange(evt);
            }
        });

        jLabel4.setText("Called AE Title");

        CalledAETlabelMWL.setText("<entry>");

        jLabel6.setText("Calling AE Title");

        CallingAETLabelMWL.setText("<entry>");

        jLabel12.setText("Host");

        MWLHost.setText("<entry>");

        jLabel13.setText("Port");

        MWLPort.setText("<entry>");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(QueryBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(56, 56, 56))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(QueryDestLb)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MWLPort)
                            .addComponent(MWLHost)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(CallingAETLabelMWL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CalledAETlabelMWL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(QueryDest, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(52, 52, 52)))))
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(QueryDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(QueryDestLb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(CalledAETlabelMWL, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(CallingAETLabelMWL, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(MWLHost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(MWLPort))
                .addGap(12, 12, 12)
                .addComponent(QueryBtn))
        );

        FileMenu.setText("File");

        ImageInfoMenu.setText("Image Info");
        ImageInfoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageInfoMenuActionPerformed(evt);
            }
        });
        FileMenu.add(ImageInfoMenu);

        jMenuItemDisplay.setText("View DICOM File");
        jMenuItemDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDisplayActionPerformed(evt);
            }
        });
        FileMenu.add(jMenuItemDisplay);

        jMenuImportConfig.setText("Import Config");
        jMenuImportConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuImportConfigActionPerformed(evt);
            }
        });
        FileMenu.add(jMenuImportConfig);

        FileMenuExit.setText("Exit");
        FileMenuExit.setToolTipText("Exit app");
        FileMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuExitActionPerformed(evt);
            }
        });
        FileMenu.add(FileMenuExit);

        jMenuBar1.add(FileMenu);

        EditMenu.setText("Edit");

        EditMenuConfigure.setText("DICOM Configuration");
        EditMenuConfigure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditMenuConfigureActionPerformed(evt);
            }
        });
        EditMenu.add(EditMenuConfigure);

        ManufacturerModelMenu.setText("Manufacturer/Model Configuration");
        ManufacturerModelMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManufacturerModelMenuActionPerformed(evt);
            }
        });
        EditMenu.add(ManufacturerModelMenu);

        jMenuBar1.add(EditMenu);

        HelpMenu.setText("Help");

        HelpHelpMenuItem.setText("Help");
        HelpHelpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpHelpMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpHelpMenuItem);

        HelpAboutMenuItem.setText("About");
        HelpAboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpAboutMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpAboutMenuItem);

        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Private utility functions
     * 
     * Private listener class for changes in DICOM configuration.
     */
    private class ConfigChangeListener implements ComponentListener{
        @Override
        public void componentResized(ComponentEvent ce) {
            Logger.getLogger(ConfigChangeListener.class.getName()).log(Level.INFO, null, ce);
        }

        @Override
        public void componentMoved(ComponentEvent ce) {
            Logger.getLogger(ConfigChangeListener.class.getName()).log(Level.INFO, null, ce);
        }

        @Override
        public void componentShown(ComponentEvent ce) {
            Logger.getLogger(ConfigChangeListener.class.getName()).log(Level.INFO, null, ce);
        }

        @Override
        public void componentHidden(ComponentEvent ce) {
            Logger.getLogger(ConfigChangeListener.class.getName()).log(Level.INFO, null, ce);
            DicomConfig windowFired = (DicomConfig) ce.getSource();
            DicomConfigInfo selectedConfig = windowFired.getCurrentConfig();
            if (selectedConfig.getRole().contains("MWL")) {
                QueryDest.setSelectedItem(selectedConfig.getAlias());
                mQueryDest = selectedConfig; 
                setupMWLParams();
            } else {
                StoreSCP.setSelectedItem(selectedConfig.getAlias());
                mStoreDest = selectedConfig;
                setupStoreParams();
            }
            
        }        
    }
    /**
     * 
     * Private listener class used to detect changes in the manufacturer configuration
     *
     */
    private class ManufChangeListener implements ComponentListener{
        @Override
        public void componentResized(ComponentEvent ce) {
            Logger.getLogger(ManufChangeListener.class.getName()).log(Level.INFO, null, ce);
        }

        @Override
        public void componentMoved(ComponentEvent ce) {
            Logger.getLogger(ManufChangeListener.class.getName()).log(Level.INFO, null, ce);
        }

        @Override
        public void componentShown(ComponentEvent ce) {
            Logger.getLogger(ManufChangeListener.class.getName()).log(Level.INFO, null, ce);
        }

        @Override
        public void componentHidden(ComponentEvent ce) {
            Logger.getLogger(ManufChangeListener.class.getName()).log(Level.INFO, null, ce);
            ModelManufacturer windowFired = (ModelManufacturer) ce.getSource();
            ModelManufacturerEntry selectedConfig = windowFired.getmCurrentEntry();
            ManufacturerComboBox.setSelectedItem(selectedConfig.getAlias());
            setupMFGModelInfo();           
        }        
    }        
    /**
     * the log panel writer class is used to get the redirected output of the Logger and the System.out strings 
     * into the text pane used by the log viewer window invoked by the show log button
     */
    private class LogPanelWriter implements Runnable{
        private String logMsg;
        public LogPanelWriter (String msg){
            logMsg = msg;
        }        
        @Override
        public void run()
        {
            viewText.append(logMsg);
        }
    }
    /**
     * 
     * function to redirect system streams to text pane
     */         
    private void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(final int b) throws IOException {
              updateTextPane(String.valueOf((char) b));
            }
            @Override
            public void write(byte[] b, int off, int len) throws IOException {
              updateTextPane(new String(b, off, len));
            }
            @Override
            public void write(byte[] b) throws IOException {
              write(b, 0, b.length);
            }
        };
        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }

    /**
     * Function checkDicomDir is used to check the existence of the DICOMDIR file and if it exists 
     * the function invokes the DICOM directory browser which displays a tree view of the DICOMDIR info 
     * in a collapsed format, the user needs to expand and select the study or portions of the study he 
     * wants to assign to the current transmission
     * 
     * @param String DicomDirFileName     The fully qualified path and name of the DICOMDIR file
     * @return  boolean value indicating whether the file passed to the function is a DICOMDIR file.
     */
    private boolean checkDicomDir(String DicomDirFileName) {
        File DicomDirFile = new File(DicomDirFileName);
        boolean isDicomDir = false;
        if (DicomDirFile.exists()) {
            isDicomDir = true;
            DicomDirectoryBrowserDialog Browser = new DicomDirectoryBrowserDialog(this,true);
            Browser.Execute(DicomDirFileName); 
            if (!Browser.isCancelled()){
                FileList = Browser.getSelectedFiles();
                // add the path to each file
                Iterator i = FileList.iterator();
                Vector TempList = new Vector();
                while (i.hasNext()){
                    String path = DicomDirFile.getParent() + "/" + i.next().toString();
                    boolean add = TempList.add(path);
                }
                FileList = TempList;
            }
            else 
            {
                FileList = null;
            }
        }
        return isDicomDir;
    }

    /**
     * The function returns a list of files in a folder in an array of files
     * 
     * @param folder    The folder that contain the files. note that the function does not recursively parse directories
     * @return File[]   the list of files contained in the directory. this also includes folders, the user must filter them out 
     * @throws ReadFileException 
     */
    private File[] getFilesFromFolder(String folder) throws ReadFileException {
        File directory = new File(folder);
        if (!directory.isDirectory()) {
            throw new ReadFileException(folder + " is not a folder.");
        }
        File[] dcmFiles = directory.listFiles();
        return dcmFiles;
    }
    /**
     * The function reads a list of files contained in the class member mDirectory. Creates a vector of 
     * the files found in the directory
     * @throws ReadFileException 
     */
    private void createFileList() throws ReadFileException {
         File[] files = getFilesFromFolder(getmDirectory());
         FileList = new Vector();
        for (File file : files) {
            String filename = file.getAbsolutePath();
            if (isDicomOrAcrNemaFile(filename)) {
                System.out.println("\nFound: " + filename + "\n");
                FileList.add(filename);
            } else {
                System.out.println("\nNot a DICOM File: " + filename + "\n");                
            }
        }
    }
    /**
     * Read the current settings saved on the last close, it will set the modality worklist SCP,
     * the Storage destination, the last selected directory, the manufacturer.
     */
    private void getCurrentConfig(){
        ModalitySimulatorConfig tempConfig = new ModalitySimulatorConfig();
        Vector Paths;
        boolean selectPathAdded = false;
        if (tempConfig.read()) {
            // set the combobox selection to the last stored selection
            QueryDest.setSelectedItem(tempConfig.getmSelectedMWL());
            // update the displayed fields
            setupMWLParams();
            // Set the storage destination selection
            StoreSCP.setSelectedItem(tempConfig.getmSelectedStorageSCP());
            // upate the Store SCP params
            setupStoreParams();
            // Set the selected Manufacturer
            ManufacturerComboBox.setSelectedItem(tempConfig.getmSelectedManufacturer());
            // update the manufacturer pane information
            setupMFGModelInfo();
            Paths = tempConfig.getmSavedPaths();
            Iterator i = Paths.iterator();
            while (i.hasNext()){
                String tmpPath = i.next().toString();
                DirectoryPath.addItem(tmpPath);
                if (tmpPath.equals(tempConfig.getmSelectedPath())) {
                    selectPathAdded = true;
                }
            }
            if (!selectPathAdded){
                // make sure that what was last selected is added to the list
                DirectoryPath.addItem(tempConfig.getmSelectedPath());
            }
            DirectoryPath.setSelectedItem(tempConfig.getmSelectedPath());          
        }
    }  
    /**
     * 
     */
    private void saveCurrentConfig(){
        // BUG make sure handle empty configurations
        
        ModalitySimulatorConfig tempConfig = new ModalitySimulatorConfig();
        Vector Paths = new Vector();
        if (QueryDest.getSelectedIndex() >= 0) {
            tempConfig.setmSelectedMWL(QueryDest.getSelectedItem().toString());
        }
        if (StoreSCP.getSelectedIndex() >= 0) {
            tempConfig.setmSelectedStorageSCP(StoreSCP.getSelectedItem().toString());
        }        
        if (ManufacturerComboBox.getSelectedIndex() >= 0) {
            tempConfig.setmSelectedManufacturer(ManufacturerComboBox.getSelectedItem().toString());
        }
        if (DirectoryPath.getSelectedIndex() >= 0) {
            tempConfig.setmSelectedPath(DirectoryPath.getSelectedItem().toString());
        }
        int loopcnt = DirectoryPath.getItemCount();
        // save the last 25 entries in the control.
        for (int i = (loopcnt > 25 ? i = loopcnt - 25 : 0); i < loopcnt ; i++){
            String path = DirectoryPath.getItemAt(i).toString();
            if (!path.equals("./")){
                if (!Paths.add(path)){
                    Logger.getLogger(CDImporterGUI.class.getName()).log(Level.WARNING, "Failed to add directory path{0}", DirectoryPath.getItemAt(i).toString());
                }
            }
        }
        tempConfig.setmSavedPaths(Paths);
        if (!tempConfig.write()){
                Logger.getLogger(CDImporterGUI.class.getName()).log(Level.WARNING, "Failed to write ");            
        }       
    }
    /**
     * The function adds a string of messages to the log panel
     * 
     * @param valueOf The string message
     */
    private void updateTextPane(String valueOf) {
        
        java.awt.EventQueue.invokeLater(new LogPanelWriter(valueOf));
    }
    /**
     * Initialize the following drop list:
     *  JComboBox QueryDest
     *  jComboBox DirectoryPath
     *  jComboBox ManufacturerComboBox
     *  JComboBox StoreSCP
     * The source of the information are the observe-able list editable by the configuration editors 
     * or read from the saved configuration information
     */
    private void initDropLists(){
        updateMWLList();
        if (mQueryDestModel == null){
            mQueryDestModel = new EventComboBoxModel(mMWLDestList);
            QueryDest.setModel(mQueryDestModel);
        }
        updateSTRList();
       // setup the model for the droplists if it already does not exist
        ManufacturerComboBox.removeAllItems();
        if (mChangingMFGModelList != null){
            for (ModelManufacturerEntry mfg : mChangingMFGModelList){
                if (mfg != null){
                    this.ManufacturerComboBox.addItem(mfg.getAlias()); 
                }
            }
        }
        if (QueryDest.getItemCount() == 0){
            QueryDest.setSelectedIndex(-1);
            this.CalledAETlabelMWL.setText("");
            this.CallingAETLabelMWL.setText("");
            this.MWLHost.setText("");
            this.MWLPort.setText("");
        }
            
        if (StoreSCP.getItemCount() == 0){
            StoreSCP.setSelectedIndex(-1);
            this.CalledAETlabelStore.setText("");
            this.CallingAETlabelStore.setText("");
            this.StoreHost.setText("");
            this.StorePort.setText("");
        }
    }
    /**
     * clear the results of the last Modality worklist query
     */
    private void clearQeryResults () {
        while (!mQueryResults.isEmpty()){
           mQueryResults.remove(0);
        }
    };
    /**
     * Update the table containing the results of the last modality worklist query
     */
    private void updateTableView(){
        if (mTableModel == null){
            String[] propertyNames = new String[] {"PatientName", 
                                                   "PatientID", 
                                                   "AccessionNumber", 
                                                   "Modality"};
            String[] columnLabels = new String[] {"Patient Name", "Patient Id", "Accession #", "Modality"};
            TableFormat tf = GlazedLists.tableFormat(WorkListEntry.class, propertyNames, columnLabels);
            mTableModel = new EventTableModel(mQueryResults, tf);
            QueryResultList.setModel(mTableModel);  
            QueryResultList.setAutoCreateRowSorter(true);
        }
    }
    /**
     * Issues a modality worklist query to the selected SCP and using the filters entered in the fields.
     * 
     * @return the number of valid matches
     * @throws Exception 
     */
    private int performQuery() throws Exception{
        	
        int n = mMwlScu.cFind();
        // eval results
        if(n > 0){
            WorkListEntry[] wL = mMwlScu.getResult();
            for(int i = 0; i < n; i++){
                mQueryResults.add (wL[i]);
            }
        }
        return n;
    }
    /**
     * update the list of modality worklist entries in from the complete dicom configuration list 
     */
    public void updateMWLList() {
        if ( getmMWLDestList() != null && mChangingAETList != null && mChangingAETList.size() > 0){
            getmMWLDestList().clear();
            for (DicomConfigInfo info : mChangingAETList)
            {
                if (info != null && info.getRole().equals("MWL SCP")) {
                    getmMWLDestList().add(info.getAlias());
                }
            }
        } 
    }
    /**
     * Update the store SCP list from the complete DICOM configuration list
     */
    public void updateSTRList() {
        if ( getmSTRDestList() != null && mChangingAETList != null && mChangingAETList.size() > 0){
            getmSTRDestList().clear();
            for (DicomConfigInfo info : mChangingAETList)
            {
                if (info != null && info.getRole().equals("STORE SCP")) {
                    getmSTRDestList().add(info.getAlias());
                }
            }
        } 
    }
    /**
     * update the displayed worklist data
     */
    private void setupMWLParams(){
        if (mConfInfo != null){
            setmQueryDest(mConfInfo.findByAlias(QueryDest.getSelectedItem()));
        }
        if (getmQueryDest() != null){
            this.CalledAETlabelMWL.setText(mQueryDest.getApplicationEntity());
            this.CallingAETLabelMWL.setText(mQueryDest.getmCallingAE());
            this.MWLHost.setText(mQueryDest.getHost());
            this.MWLPort.setText(mQueryDest.getPort());
        }
    }
    /**
     * update the displayed selected worklist item
     */
    private void updateQRSelection(){
        mSelectedQRResult = this.QueryResultList.convertRowIndexToModel(QueryResultList.getSelectedRow());
        this.AccessionNumber.setText(mQueryResults.get(mSelectedQRResult).getAccessionNumber());
        this.PatientName.setText(mQueryResults.get(mSelectedQRResult).getPatientName());
        this.PatientID.setText(mQueryResults.get(mSelectedQRResult).getPatientID());
        this.Modality.setSelectedItem(mQueryResults.get(mSelectedQRResult).getModality()); 
        Send.setEnabled(CheckSend());
    }  
    /**
     * display the selected worklist item entry details
     */
    private void DisplayMWLentry(){
        HelpDialog help = new HelpDialog(this, true);
        int selectEntry = QueryResultList.convertRowIndexToModel(QueryResultList.getSelectedRow());
        String result = mQueryResults.get(selectEntry).getFormattedString();
        help.setTitle("Modality Worklist Entry");
        help.setDislayText(result);
        help.setVisible(true);    
    }
    /**
     * display the selected storage destination
     */
    private void setupStoreParams(){
        setmStoreDest(mConfInfo.findByAlias(StoreSCP.getSelectedItem()));
        if(getmStoreDest() != null){
            this.CalledAETlabelStore.setText(getmStoreDest().getApplicationEntity());
            this.CallingAETlabelStore.setText(getmStoreDest().getmCallingAE());
            this.StoreHost.setText(getmStoreDest().getHost());
            this.StorePort.setText(getmStoreDest().getPort());
            this.UpdateUIDs.setSelected(getmStoreDest().ismUIDupdate());
        }
    }
    /**
     * verify if all item required for transmission are satisfied
     * @return True if OK to send
     */
    private boolean CheckSend(){
        boolean dirEmpty = DirectoryPath.getSelectedItem().toString().isEmpty();
        boolean patEmpty = PatientName.getText().isEmpty();
        boolean patidEmpty = PatientID.getText().isEmpty();
        boolean queryEmpty = mQueryResults.isEmpty();
        boolean accnEmpty = AccessionNumber.getText().isEmpty();
        boolean isDir = isPathValid();
        boolean MWL = UseMWL.isSelected();
         if (!dirEmpty &&
            !patEmpty &&
            !patidEmpty &&
            !accnEmpty && 
            isDir){
            return !queryEmpty || !MWL;
         } else {
             return false;
         }      
    }
     /**
     * Verify if the selected path is valid
     * @return OK if valid
     */
    private boolean isPathValid(){
        if (!DirectoryPath.getSelectedItem().toString().isEmpty()){
            File tFile = new File(DirectoryPath.getSelectedItem().toString());
            if (tFile.isDirectory()) {
                return true;
            } else {
                return false;
            }       
        } else {
            return false;
        }
    }  
    /**
     * set the the displayed fields to the selected manufacturer info
     */
    private void setupMFGModelInfo() {
        setSelectedManufacturer(this.mManufacturer.findByAlias(this.ManufacturerComboBox.getSelectedItem()));
        if (getSelectedManufacturer() != null){
            this.SelectedManufacturer.setText(getSelectedManufacturer().getManufacturer());
            this.SelectedModel.setText(getSelectedManufacturer().getModel()); 
            this.SelectedModality.setText(getSelectedManufacturer().getModality());
        }
    }
    /**
     * Control event handling code for sending all the selected items.
     * 
     * @param evt 
     */
    private void SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendActionPerformed
        Integer port;
        BrowseDir.setEnabled(false);
        DirectoryPath.setEnabled(false);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        final SimulatorInfo symInfo = new SimulatorInfo();
        symInfo.setCalledAETitleMWL(getmQueryDest().getApplicationEntity());
        symInfo.setCallingAETitleMWL(getmQueryDest().getmCallingAE());
        symInfo.setHostnameMWL(getmQueryDest().getHost());
        try {
            port = Integer.parseInt(getmQueryDest().getPort().trim());
        }
        catch (NumberFormatException nfe) {
            this.setCursor(null);
            Logger.getLogger(CDImporterGUI.class.getName()).log(Level.WARNING, null, nfe);
            return;
        }
        symInfo.setPortMWL(port);
        symInfo.setCalledAETitleStore(getmStoreDest().getApplicationEntity());
        symInfo.setCallingAETitleStore(getmStoreDest().getmCallingAE());
        symInfo.setHostnameStore(getmStoreDest().getHost());
        symInfo.setUpDateUIds(getmStoreDest().ismUIDupdate());
        try {
            port = Integer.parseInt(getmStoreDest().getPort().trim());
        }
        catch (NumberFormatException nfe) {
            this.setCursor(null);
            Logger.getLogger(CDImporterGUI.class.getName()).log(Level.WARNING, null, nfe);
            return;
        }
        symInfo.setPortStore(port);
        symInfo.setsourceDir(getmDirectory());
        symInfo.setloopCount(1);
        symInfo.setManufacturerOverride(SelectedManufacturer.getText().equals("<original>") ? "": SelectedManufacturer.getText());
        symInfo.setModelOverride(SelectedModel.getText().equals("<original>") ? "": SelectedModel.getText());
        symInfo.setModalityOverride(SelectedModality.getText().equals("<original>")?"":SelectedModality.getText());
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run (){
                SendDirectoryOfImages sender;
                Send.setEnabled(false);
                if (!UseMWL.isSelected()){
                    System.err.println("Sending from local entries");
                    WorkListEntry LocalData = new WorkListEntry();
                    LocalData.setPatientName (PatientName.getText());
                    LocalData.setPatientID (PatientID.getText());
                    LocalData.setAccessionNumber(AccessionNumber.getText());                    
                    sender = new SendDirectoryOfImages(symInfo,LocalData);
                } else {
                    sender = new SendDirectoryOfImages(symInfo,mQueryResults.get(mSelectedQRResult));
                }
                if (UpdateUIDs.isSelected()){
                    // Override the destination setting
                    sender.setUpdateUIds(true);
                    symInfo.setUpDateUIds(true);
                } else {                  
                    sender.setUpdateUIds(false);
                    symInfo.setUpDateUIds(false);                }
                if (FileList.isEmpty()){
                    // for some reason the syste did nto buidl an image list, use the directoy and build the old way.
                    // :)
                    //
                    sender.execute();
                } else {
                    //  Use the file list
                    sender.execute(FileList);
                }
                setCursor(null);
                Send.setEnabled(true);
                BrowseDir.setEnabled(true);
                DirectoryPath.setEnabled(true);
            }
        });
        thread.start();        

    }//GEN-LAST:event_SendActionPerformed
    /**
     * Exit system
     * 
     * @param evt 
     */
    private void FileMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuExitActionPerformed
        saveCurrentConfig();
        System.exit(0);
    }//GEN-LAST:event_FileMenuExitActionPerformed
    /**
     *  Edit DICOM configuration
     * 
     * @param evt 
     */
    private void EditMenuConfigureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditMenuConfigureActionPerformed
        DicomConfig confWindow = new DicomConfig();
        ConfigChangeListener eventListener = new ConfigChangeListener();
        confWindow.addComponentListener(eventListener);
        confWindow.setVisible(true);
    }//GEN-LAST:event_EditMenuConfigureActionPerformed
    /**
     * ake an object out of a tring item
     * 
     * @param item
     * @return Object
     */
    private Object makeObj(final String item)  {
        return new Object() { public String toString() { return item; } };
    }
    /**
     * select directory of items to send
     * 
     * @param evt 
     */
    private void BrowseDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseDirActionPerformed
        JFileChooser directory = new JFileChooser();
        directory.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        directory.setAcceptAllFileFilterUsed(false);
        File currentSelected = new File(this.DirectoryPath.getSelectedItem().toString());
       if (currentSelected.isDirectory()){
            directory.setSelectedFile(currentSelected);
        } else {
            directory.setSelectedFile(null);
        }

        if (directory.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            setmDirectory(directory.getSelectedFile().toString());
            Object NewDir = makeObj(getmDirectory());
            this.DirectoryPath.addItem(NewDir);
            DirectoryPath.setSelectedItem(NewDir);
            Send.setEnabled(CheckSend());
        }
    }//GEN-LAST:event_BrowseDirActionPerformed
    /**
     * Perform DICOM MWL Query
     * 
     * @param evt 
     */
    private void QueryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryBtnActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
        QueryBtn.setEnabled(false);
        Clear.setEnabled(false);
        Send.setEnabled(false);
        Integer port;
        String lModality="";
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            port = Integer.parseInt(getmQueryDest().getPort().trim());
        }
        catch (NumberFormatException nfe) {
            setCursor(null);
            return;
        }
        try {
            try {
                clearQeryResults();
            } catch (Exception ex){
                System.err.println(ex.getMessage());
                Logger.getLogger(CDImporterGUI.class.getName()).log(Level.WARNING, null, ex);
            }
            mMwlScu = new MWLScu(getmQueryDest().getHost(), 
                                       port,
                                       getmQueryDest().getApplicationEntity(), 
                                       getmQueryDest().getmCallingAE(),
                                       false);
            mMwlScu.setPatientName (PatientName.getText());
            mMwlScu.setPatientID (PatientID.getText());
            mMwlScu.setAccessionNumber(AccessionNumber.getText());
            if (TodayCheckBox.isSelected()){
                Calendar currentDate = Calendar.getInstance();
                SimpleDateFormat formatter= 
                new SimpleDateFormat("yyyyMMdd");
                String dateNow = formatter.format(currentDate.getTime());
                System.out.println("Now the date is :=>  " + dateNow);
                mMwlScu.setProcedureStepDate(dateNow);
                mMwlScu.setProcedureStepTime("000000-235959");
            }
            lModality = Modality.getSelectedItem().toString();
            if (lModality.equals("<none>")) lModality = "";
            mMwlScu.setModality(lModality);
            int n = performQuery();
            System.err.println("" + n + " matching Worklist Entries found");
            updateTableView();
            setCursor(null);
        } catch (Exception ex) {
            setCursor(null);
            Logger.getLogger(CDImporterGUI.class.getName()).log(Level.SEVERE, null, ex);
            String msg = ex.getMessage();
            if (msg != null && !msg.isEmpty()){
                /**
                 * kinda strange but needs to throw the dialog if an error occurs.
                 */
                ErrorMessage errdialog = new ErrorMessage(AppFrame, true);
                errdialog.setMessage(msg);
                errdialog.setVisible(true);
            }
            
        }
        QueryBtn.setEnabled(true);
        Clear.setEnabled(true);
        CheckSend();            }
        });

    }//GEN-LAST:event_QueryBtnActionPerformed
    /**
     * Handler for selecting new MWL SCP
     * 
     * @param evt 
     */
    private void QueryDestPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_QueryDestPropertyChange
        setupMWLParams();
    }//GEN-LAST:event_QueryDestPropertyChange
    /**
     * handler for setting up new MWL SCP
     * 
     * @param evt 
     */
    private void QueryDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryDestActionPerformed
        setupMWLParams();
    }//GEN-LAST:event_QueryDestActionPerformed
    /**
     * HAndle mouse event
     * 
     * @param evt 
     */
    private void QueryDestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QueryDestMouseClicked
        initDropLists();
    }//GEN-LAST:event_QueryDestMouseClicked
    /**
     * Handle mouse event 
     * 
     * @param evt 
     */
    private void QueryResultListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QueryResultListMouseReleased
        updateQRSelection();
    }//GEN-LAST:event_QueryResultListMouseReleased
    /**
     * Handle Keyboard event 
     * @param evt 
     */      
    private void QueryResultListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QueryResultListKeyTyped
        updateQRSelection();
    }//GEN-LAST:event_QueryResultListKeyTyped
    /**
     * Handle Keyboard event 
     * @param evt 
     */      
    private void QueryResultListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QueryResultListKeyReleased
        updateQRSelection();
    }//GEN-LAST:event_QueryResultListKeyReleased
    /**
     *  handle action
     * @param evt 
     */
    private void StoreSCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StoreSCPActionPerformed
        setupStoreParams();
    }//GEN-LAST:event_StoreSCPActionPerformed
    /**
     * Mouse clicked event handler
     * 
     * @param evt 
     */
    private void StoreSCPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StoreSCPMouseClicked
        initDropLists();
    }//GEN-LAST:event_StoreSCPMouseClicked
    /**
     * change in property
     * 
     * @param evt 
     */
    private void StoreSCPPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_StoreSCPPropertyChange
        setupStoreParams();
    }//GEN-LAST:event_StoreSCPPropertyChange
    /**
     * Clear the query results
     * 
     * @param evt 
     */
    private void ClearAllQueryStuff(){
        try {
            clearQeryResults();
        } catch (Exception ex){
            System.err.println(ex.getMessage());
            Logger.getLogger(CDImporterGUI.class.getName()).log(Level.WARNING, null, ex);
        }       
        this.updateTableView();
        this.mSelectedQRResult = 0;
        this.AccessionNumber.setText("");
        this.PatientName.setText("");
        this.PatientID.setText("");
        this.Modality.setSelectedIndex(0);
        this.Send.setEnabled(CheckSend());
    }
    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        ClearAllQueryStuff();
    }//GEN-LAST:event_ClearActionPerformed
    /**
     * Display image info (DICOM Header display)
     * 
     * @param evt 
     */
    private void ImageInfoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageInfoMenuActionPerformed
        DicomImageInfo dcmImageInfo = new DicomImageInfo();
        dcmImageInfo.HideOnClose();
    }//GEN-LAST:event_ImageInfoMenuActionPerformed
    /**
     * Do help if there is
     * @param evt 
     */
    private void HelpHelpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpHelpMenuItemActionPerformed
        HelpDialog help = new HelpDialog(this, true);
        help.setHelpText();
        help.setVisible(true);
    }//GEN-LAST:event_HelpHelpMenuItemActionPerformed
    /**
     * OK we will tell you something
     * 
     * @param evt 
     */
    private void HelpAboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpAboutMenuItemActionPerformed
        String messageString = "Dicom Modality Simulator \n" +
                            "Version: 1.1 \n" +
                            "Object Forge, Inc. \n" +
                            "Copyright (c) 2017 \n";
                           
        JOptionPane.showMessageDialog(this, messageString, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_HelpAboutMenuItemActionPerformed
    /**
     * edit the manufacturer stuff
     * 
     * @param evt 
     */
    private void ManufacturerModelMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManufacturerModelMenuActionPerformed
        ModelManufacturer modman = new ModelManufacturer(); 
        ManufChangeListener eventListener = new ManufChangeListener();
        modman.addComponentListener(eventListener);
        modman.setVisible(true);
    }//GEN-LAST:event_ManufacturerModelMenuActionPerformed
    /**
     * handle the event for manufacturer combo box 
     * @param evt 
     */
    private void ManufacturerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManufacturerComboBoxActionPerformed
        setupMFGModelInfo();
    }//GEN-LAST:event_ManufacturerComboBoxActionPerformed
    /**
     * Display Cliunie's dicom image viewer
     * 
     * @param evt 
     */
    private void jMenuItemDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDisplayActionPerformed
        String[] args=new String[1];
        args[0]=DirectoryPath.getSelectedItem().toString();
        DicomImageViewer.main(args);
    }//GEN-LAST:event_jMenuItemDisplayActionPerformed
    /**
     * 
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveCurrentConfig();
        Logger.getLogger(CDImporterGUI.class.getName()).log(Level.INFO, null, evt);
    }//GEN-LAST:event_formWindowClosing
    /**
     * Display the details of the selected modality worklist item
     * 
     * @param evt 
     */
    private void QueryResultListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QueryResultListMouseClicked
        if (evt.getClickCount()== 2){
            //  Display the MWL Entry
            this.DisplayMWLentry();
        }
    }//GEN-LAST:event_QueryResultListMouseClicked
    /**
     * the filer for tuday's exams is selected
     * 
     * @param evt 
     */
    private void TodayCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TodayCheckBoxActionPerformed
        Logger.getLogger(CDImporterGUI.class.getName()).log(Level.INFO, null, evt);
    }//GEN-LAST:event_TodayCheckBoxActionPerformed
    /**
     * Display the log viewer window
     * 
     * @param evt 
     */
    private void ShowLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowLogActionPerformed
        mLogViewer.setVisible(true);
    }//GEN-LAST:event_ShowLogActionPerformed
    /**
     * Select the directory path to process
     * 
     * @param evt 
     */
    private void DirectoryPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectoryPathActionPerformed
        setmDirectory(DirectoryPath.getSelectedItem().toString());
        if (!checkDicomDir(getmDirectory() + "/DICOMDIR")){
            try {
                createFileList();
            } catch (ReadFileException ex) {
                Logger.getLogger(CDImporterGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_DirectoryPathActionPerformed
    /**
     * handle mouse event
     * 
     * @param evt 
     */
    private void DirectoryPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DirectoryPathMouseClicked
        Logger.getLogger(CDImporterGUI.class.getName()).log(Level.INFO, null, evt);
    }//GEN-LAST:event_DirectoryPathMouseClicked

    private void jMenuImportConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuImportConfigActionPerformed
        Logger.getLogger(CDImporterGUI.class.getName()).log(Level.INFO, null, evt);
        _mImport = new ImportConfigFrame();
        _mImport.setVisible(true);
    }//GEN-LAST:event_jMenuImportConfigActionPerformed

    private void UseMWLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseMWLActionPerformed
        // TODO add your handling code here:
        ClearAllQueryStuff();
        if (UseMWL.isSelected()){
            UseMWL.setText("Modality Worklist On");
            QueryBtn.setEnabled(true); 
            EnableMWL = true;
        } else {
            UseMWL.setText("Modality Worklist Off");
            QueryBtn.setEnabled(false); 
            EnableMWL = false;
        }
    }//GEN-LAST:event_UseMWLActionPerformed

    private void PatientNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PatientNameKeyTyped
        // TODO add your handling code here:
        this.Send.setEnabled(CheckSend());
    }//GEN-LAST:event_PatientNameKeyTyped

    private void PatientIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PatientIDKeyTyped
        // TODO add your handling code here:
        this.Send.setEnabled(CheckSend());
    }//GEN-LAST:event_PatientIDKeyTyped

    private void AccessionNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AccessionNumberKeyTyped
        // TODO add your handling code here:
        this.Send.setEnabled(CheckSend());
    }//GEN-LAST:event_AccessionNumberKeyTyped

    private void MoreOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoreOptionsActionPerformed
        // TODO add your handling code here:
        MoreOptions moreOpt = new MoreOptions();
        moreOpt.setVisible(true);
    }//GEN-LAST:event_MoreOptionsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new CDImporterGUI().setVisible(true);
            }
        });
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AccessionNUmberLb;
    private javax.swing.JTextField AccessionNumber;
    private javax.swing.JButton BrowseDir;
    private javax.swing.JLabel CalledAETlabelMWL;
    private javax.swing.JLabel CalledAETlabelStore;
    private javax.swing.JLabel CallingAETLabelMWL;
    private javax.swing.JLabel CallingAETlabelStore;
    private javax.swing.JButton Clear;
    private javax.swing.JComboBox DirectoryPath;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem EditMenuConfigure;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem FileMenuExit;
    private javax.swing.JMenuItem HelpAboutMenuItem;
    private javax.swing.JMenuItem HelpHelpMenuItem;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem ImageInfoMenu;
    private javax.swing.JLabel MWLHost;
    private javax.swing.JLabel MWLPort;
    private javax.swing.JComboBox ManufacturerComboBox;
    private javax.swing.JMenuItem ManufacturerModelMenu;
    private javax.swing.JComboBox Modality;
    private javax.swing.JLabel ModalityLb;
    private javax.swing.JButton MoreOptions;
    private javax.swing.JLabel PatIDLbl;
    private javax.swing.JTextField PatientID;
    private javax.swing.JTextField PatientName;
    private javax.swing.JLabel PnameLBL;
    private javax.swing.JButton QueryBtn;
    private javax.swing.JComboBox QueryDest;
    private javax.swing.JLabel QueryDestLb;
    private javax.swing.JTable QueryResultList;
    private javax.swing.JLabel SelectedManufacturer;
    private javax.swing.JLabel SelectedModality;
    private javax.swing.JLabel SelectedModel;
    private javax.swing.JButton Send;
    private javax.swing.JButton ShowLog;
    private javax.swing.JLabel StoreHost;
    private javax.swing.JLabel StorePort;
    private javax.swing.JComboBox StoreSCP;
    private javax.swing.JLabel StoreSCPLb;
    private javax.swing.JCheckBox TodayCheckBox;
    private javax.swing.JCheckBox UpdateUIDs;
    private javax.swing.JToggleButton UseMWL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuImportConfig;
    private javax.swing.JMenuItem jMenuItemDisplay;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Overriden methods for observeable lists.
     * 
     * @param list
     * @param index
     * @param length 
     */
   

    /**
     * getters and setters.
     * 
     * @return the mDirectory
     */
    public String getmDirectory() {
        return mDirectory;
    }

    /**
     * @param mDirectory the mDirectory to set
     */
    public void setmDirectory(String mDirectory) {
        this.mDirectory = mDirectory;
    }

    /**
     * @return the mQueryDest
     */
    public DicomConfigInfo getmQueryDest() {
        return mQueryDest;
    }

    /**
     * @param mQueryDest the mQueryDest to set
     */
    public void setmQueryDest(DicomConfigInfo mQueryDest) {
        this.mQueryDest = mQueryDest;
    }

    /**
     * @return the mStoreDest
     */
    public DicomConfigInfo getmStoreDest() {
        return mStoreDest;
    }

    /**
     * @param mStoreDest the mStoreDest to set
     */
    public void setmStoreDest(DicomConfigInfo mStoreDest) {
        this.mStoreDest = mStoreDest;
    }

    /**
     * @return the mSelectedManufacturer
     */
    public ModelManufacturerEntry getSelectedManufacturer() {
        return mSelectedManufacturer;
    }

    /**
     * @param mSelectedManufacturer the mSelectedManufacturer to set
     */
    public void setSelectedManufacturer(ModelManufacturerEntry mSelectedManufacturer) {
        this.mSelectedManufacturer = mSelectedManufacturer;
    }

//    @Override
//    public void listChanged(ListEvent<DicomConfigInfo> le) {
//        initDropLists();
//    }

    /**
     * @return the mChangingMFGModelList
     */
    public EventList<ModelManufacturerEntry> getmChangingMFGModelList() {
        return mChangingMFGModelList;
    }


    @Override
    /**
     * @param ListEvent<DicomConfigInfo> le
     */
    public void listChanged(ListEvent<DicomConfigInfo> le) {
        initDropLists();
    }

    /**
     * @return the mMWLDestList
     */
    public EventList<String> getmMWLDestList() {
        return mMWLDestList;
    }

    /**
     * @return the mSTRDestList
     */
    public EventList<String> getmSTRDestList() {
        return mSTRDestList;
    }
}
